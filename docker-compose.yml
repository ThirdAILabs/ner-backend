services:
  # --- Services Needed by BOTH Head & Workers (using profiles) ---
  rabbitmq:
    image: rabbitmq:3.11-management
    profiles: [ "head" ] # Explicitly part of both profiles
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-user}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS:-password}
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Services ONLY for the "Head" Node ---
  postgres:
    image: postgres:15
    profiles: [ "head" ] # <<< Only starts when '--profile head' is used
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-ner-backend}
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASS:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      # Optional: expose port if needed externally from the head node host
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-ner-backend}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: quay.io/minio/minio:latest
    profiles: [ "head" ] # <<< Only starts when '--profile head' is used
    command: server /data --console-address ":9090"
    ports:
      - "9000:9000" # S3 API port
      - "9090:9090" # Console UI port
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-YOURACCESSKEY}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-YOURSECRETKEY}
    volumes:
      - minio_data:/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 5s
      timeout: 1s
      retries: 5

  # --- Go Application Services ---
  api:
    # Your "head" node API service (runs Go binary)
    build:
      context: . # Build from current directory using Dockerfile
      dockerfile: Dockerfile
    profiles: [ "head" ]
    command: [ "--head" ] # Tells entrypoint.sh to run /app/api
    ports:
      - "${API_PORT:-8001}:8001" # Expose API port
      - "${FRONTEND_PORT:-3001}:3000" # Expose API port
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:password@postgres:5432/ner-backend?sslmode=disable}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://user:password@rabbitmq:5672/}
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL:-http://minio:9000}
      - INTERNAL_AWS_ACCESS_KEY_ID=${INTERNAL_AWS_ACCESS_KEY_ID:-YOURACCESSKEY}
      - INTERNAL_AWS_SECRET_ACCESS_KEY=${INTERNAL_AWS_SECRET_ACCESS_KEY:-YOURSECRETKEY}
      - ENTERPRISE_MODE=${ENTERPRISE_MODE:-true}
      - LICENSE_KEY=${LICENSE_KEY:-local:Ln8DAQEHTGljZW5zZQH/gAABAgEHUGF5bG9hZAEKAAEJU2lnbmF0dXJlAQoAAAD+ATX/gAEseyJFeHBpcmF0aW9uIjoiMjAyNS0wOC0wMlQxODowNDo1OC4xNjAwMjFaIn0B/gEAJpoMhnwsqAJ6CmQBvsjiBV6JqxgY1g+Quc8LcX0QIPSAvv0jTKzc8zLdr/QkTnEvOx2m2xb4sKEIY+uDTZ7AFFARSO8Z3exFt4SHDWzGy4adDMfawm9D0xwC94oypbzta2icZ7ikZmgAZuuQcHmrBEcZqLMgOVtYGtS8l6NDUue0FW8F1BzQjINfgaQFGWoJzuVLL7nGYLoHUIVmG5lwn64uY55BzhjhQUUwnL75c8S2hZYEssZghRPj9n1lRwZvaN8gtu7JTKG/E2QuegOf5R1JYfXPMd9ARE/37NtAv9TsDltCFYXXwQkIceDX7OcHQMFn8HkQxmG+oOyxc7Qc7gA=}
      - MODEL_DIR=${MODEL_DIR:-/app/models}
      - MODEL_TYPE=${MODEL_TYPE:-onnx_cnn}
      - ONNX_RUNTIME_DYLIB=/app/resources/libonnxruntime.so
    volumes:
      # - .:/app # Mount code for development (requires Go toolchain in container or local build)
      - /etc/localtime:/etc/localtime:ro
      - ${MODEL_HOST_PATH:-/Users/ashutosh/ThirdAI/models}:/app/models:ro # Mount models directory (read-only)
      - ./resources/libonnxruntime_providers_shared.so:/app/resources/libonnxruntime_providers_shared.so
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - app-network

  worker:
    # Your worker service (runs Go binary)
    build:
      context: .
      dockerfile: Dockerfile
    profiles: [ "worker" ]
    command: [ "--worker" ] # Tells entrypoint.sh to run /app/worker
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:password@postgres:5432/ner-backend?sslmode=disable}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://user:password@rabbitmq:5672/}
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL:-http://minio:9000}
      - INTERNAL_AWS_ACCESS_KEY_ID=${INTERNAL_AWS_ACCESS_KEY_ID:-YOURACCESSKEY}
      - INTERNAL_AWS_SECRET_ACCESS_KEY=${INTERNAL_AWS_SECRET_ACCESS_KEY:-YOURSECRETKEY}
      - PYTHON_EXECUTABLE_PATH=${PYTHON_EXECUTABLE_PATH:-python}
      - PYTHON_MODEL_PLUGIN_SCRIPT_PATH=${PYTHON_MODEL_PLUGIN_SCRIPT_PATH:-plugin/plugin-python/plugin.py}
      - PLUGIN_SERVER=/app/plugin/dist/plugin/plugin
    volumes:
      # - .:/app # Mount code for development (optional)
      - /etc/localtime:/etc/localtime:ro
      - ./plugin/plugin-python/dist:/app/plugin/dist:ro  # Mount the plugin directory
    deploy:
      # Allows scaling using 'docker compose up --scale worker=N'
      replicas: 1 # Default number of worker instances
    networks:
      - app-network

volumes:
  # Define persistent volumes (Docker manages these)
  rabbitmq_data:
  postgres_data:
  minio_data:


networks:
  # Define custom network for service discovery by service name
  app-network:
    driver: bridge
