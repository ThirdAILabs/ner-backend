services:
  # --- Services Needed by BOTH Head & Workers (using profiles) ---
  rabbitmq:
    image: rabbitmq:3.11-management
    profiles: ["head"] # Explicitly part of both profiles
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-user}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS:-password}
    networks:
      - app-network
    healthcheck:
        test: ["CMD", "rabbitmqctl", "status"]
        interval: 10s
        timeout: 5s
        retries: 5

  # --- Services ONLY for the "Head" Node ---
  postgres:
    image: postgres:15
    profiles: ["head"] # <<< Only starts when '--profile head' is used
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-ner_backend}
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASS:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports: # Optional: expose port if needed externally from the head node host
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-ner_backend}"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: quay.io/minio/minio:latest
    profiles: ["head"] # <<< Only starts when '--profile head' is used
    command: server /data --console-address ":9090"
    ports:
      - "9000:9000" # S3 API port
      - "9090:9090" # Console UI port
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-YOURACCESSKEY}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-YOURSECRETKEY}
    volumes:
      - minio_data:/data
    networks:
      - app-network
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
        interval: 5s
        timeout: 1s
        retries: 5

  # --- Go Application Services ---
  api: # Your "head" node API service (runs Go binary)
    build:
      context: . # Build from current directory using Dockerfile
      dockerfile: Dockerfile
    profiles: ["head"]
    command: ["--head"] # Tells entrypoint.sh to run /app/api
    ports:
      - "${API_PORT:-8000}:8000" # Expose API port
    env_file: .env # Load environment variables from .env file
    volumes:
      # - .:/app # Mount code for development (requires Go toolchain in container or local build)
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - app-network

  worker: # Your worker service (runs Go binary)
    build:
      context: .
      dockerfile: Dockerfile
    profiles: ["worker"]
    command: ["--worker"] # Tells entrypoint.sh to run /app/worker
    env_file: .env
    volumes:
      # - .:/app # Mount code for development (optional)
      - /etc/localtime:/etc/localtime:ro
    depends_on: # Workers depend on RabbitMQ being ready
      rabbitmq:
        condition: service_healthy
    deploy: # Allows scaling using 'docker compose up --scale worker=N'
        replicas: 1 # Default number of worker instances
    networks:
      - app-network

volumes: # Define persistent volumes (Docker manages these)
  rabbitmq_data:
  postgres_data:
  minio_data:

networks: # Define custom network for service discovery by service name
  app-network:
    driver: bridge